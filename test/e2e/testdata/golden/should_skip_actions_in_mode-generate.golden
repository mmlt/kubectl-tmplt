---
##01.02: InstrApply [apply -f -] namespace.yaml
apiVersion: v1
kind: Namespace
metadata:
  name: kt-test



---
##02.02: InstrApply [apply -f -] bank-vaults.yaml
apiVersion: apiextensions.k8s.io/v1beta1
kind: CustomResourceDefinition
metadata:
  name: vaults.vault.banzaicloud.com
  labels:
    example.com/gitops: kt-test
spec:
  group: vault.banzaicloud.com
  names:
    kind: Vault
    listKind: VaultList
    plural: vaults
    singular: vault
  scope: Namespaced
  version: v1alpha1

---
##02.03: InstrApply [apply -f -] bank-vaults.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: bank-vaults
  namespace: kt-test
  labels:
    example.com/gitops: kt-test
    
---
##02.04: InstrApply [apply -f -] bank-vaults.yaml

kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: bank-vaults
  labels:
    example.com/gitops: kt-test
rules:
- apiGroups:
  - vault.banzaicloud.com
  resources:
  - "*"
  verbs:
  - "*"
- apiGroups:
  - ""
  resources:
  - events
  - pods
  - services
  - configmaps
  - secrets
  verbs:
  - "*"
- apiGroups:
  - ""
  resources:
  - namespaces
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - apps
  - extensions
  resources:
  - replicasets
  verbs:
  - get
- apiGroups:
  - apps
  - extensions
  resources:
  - deployments
  - deployments/finalizers
  - statefulsets
  verbs:
  - "*"
- apiGroups:
  - etcd.database.coreos.com
  resources:
  - "*"
  verbs:
  - "*"
- apiGroups:
  - apiextensions.k8s.io
  resources:
  - customresourcedefinitions
  verbs:
  - get
- apiGroups:
  - extensions
  resources:
  - ingresses
  verbs:
  - list
  - get
  - create
  - update
  - watch
- apiGroups:
  - monitoring.coreos.com
  resources:
  - servicemonitors
  verbs:
  - update
  - list
  - get
  - create
  - watch
  
---
##02.05: InstrApply [apply -f -] bank-vaults.yaml
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: bank-vaults
  labels:
    example.com/gitops: kt-test
subjects:
- kind: ServiceAccount
  name: bank-vaults
  namespace: kt-test
roleRef:
  kind: ClusterRole
  name: bank-vaults
  apiGroup: rbac.authorization.k8s.io
  
---
##02.06: InstrApply [apply -f -] bank-vaults.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: bank-vaults
  namespace: kt-test
  labels:
    example.com/gitops: kt-test
spec:
  strategy:
    type: Recreate
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: bank-vaults
  template:
    metadata:
      labels:
        app.kubernetes.io/name: bank-vaults
    spec:
      containers:
        - name: operator
          image: docker.io/banzaicloud/vault-operator:1.3.3
          imagePullPolicy: IfNotPresent
          command:
            - vault-operator
            - -sync_period
            - "1m"
            - -verbose 
            - "true"
          env:
            # The namespace where the operator watches for vault CR objects, if not defined all namespaces are watched
            - name: WATCH_NAMESPACE
              value: ""
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: OPERATOR_NAME
              value: bank-vaults
            - name: OPERATOR_LOG_LEVEL
              value: debug
          ports:
          - containerPort: 8080
          - containerPort: 8383
          livenessProbe:
            httpGet:
              path: "/"
              port: 8080
            initialDelaySeconds: 60
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          readinessProbe:
            httpGet:
              path: "/ready"
              port: 8080
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources:
            limits:
              cpu: 100m
              memory: 256Mi
            requests:
              cpu: 100m
              memory: 128Mi
             
      serviceAccountName: bank-vaults
      terminationGracePeriodSeconds: 10

---
##02.07: InstrApply [apply -f -] bank-vaults.yaml
apiVersion: v1
kind: Service
metadata:
  name: bank-vaults
  namespace: kt-test
  labels:
    example.com/gitops: kt-test
spec:
  type: ClusterIP
  ports:
  - port: 80
    targetPort: 8080
    protocol: TCP
    name: http
  - port: 8383
    protocol: TCP
    name: http-metrics
  selector:
    app.kubernetes.io/name: bank-vaults


---
##03.02: InstrApply [apply -f -] vault-rbac.yaml
kind: ServiceAccount
apiVersion: v1
metadata:
  name: vault
  namespace: kt-test
  labels:
    example.com/gitops: kt-test

---
##03.03: InstrApply [apply -f -] vault-rbac.yaml
kind: Role
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: vault-secrets
  namespace: kt-test
  labels:
    example.com/gitops: kt-test
rules:
  - apiGroups:
      - ""
    resources:
      - secrets
    verbs:
      - "*"

---
##03.04: InstrApply [apply -f -] vault-rbac.yaml
kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: vault-secrets
  namespace: kt-test
  labels:
    example.com/gitops: kt-test
roleRef:
  kind: Role
  name: vault-secrets
  apiGroup: rbac.authorization.k8s.io
subjects:
  - kind: ServiceAccount
    name: vault

---
##03.05: InstrApply [apply -f -] vault-rbac.yaml
kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: vault-psp
  namespace: kt-test
  labels:
    example.com/gitops: kt-test
roleRef:
  kind: ClusterRole
  name: psp:privileged
  apiGroup: rbac.authorization.k8s.io
subjects:
  - kind: ServiceAccount
    name: vault

---
##03.06: InstrApply [apply -f -] vault-rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: vault-operator-auth-delegator
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: system:auth-delegator
subjects:
- kind: ServiceAccount
  name: vault
  namespace: kt-test

---
##04.01: InstrApply [apply -f -] vault-cr.yaml
# Create Vault instance.

apiVersion: "vault.banzaicloud.com/v1alpha1"
kind: "Vault"
metadata:
  name: "vault"
  namespace: kt-test
  labels:
    example.com/gitops: kt-test
spec:
  size: 1
  image: docker.io/vault:1.3.6
  bankVaultsImage: docker.io/banzaicloud/bank-vaults:1.3.3
  statsdImage: docker.io/prom/statsd-exporter:v0.18.0

  # Common annotations for all created resources
  annotations:
    common/annotation: "true"
  
  # Vault Pods , Services and TLS Secret annotations
  vaultAnnotations:
    type/instance: "vault"
  
  # Vault Configurer Pods and Services annotations
  vaultConfigurerAnnotations:
    type/instance: "vaultconfigurer"

  # Vault Pods , Services and TLS Secret labels
  vaultLabels:
    example.com/log-format: "json"

  # Vault Configurer Pods and Services labels
  vaultConfigurerLabels:
    example.com/log-format: "string"

  #~ vaultPodSpec:
    #~ containers:
    #~ - name: vault
      #~ livenessProbe:
        #~ initialDelaySeconds: 30
  # Vault needs to run privileged to set memory locking (no memory swapping to disk).
  # After this has been set the vault service will run as user vault.
  vaultPodSpec:
    securityContext:
      privileged: true

  # Support for nodeAffinity Rules
  # nodeAffinity:
  #   requiredDuringSchedulingIgnoredDuringExecution:
  #     nodeSelectorTerms:
  #     - matchExpressions:
  #       - key : "node-role.kubernetes.io/your_role"
  #         operator: In
  #         values: ["true"]

  # Support for pod nodeSelector rules to control which nodes can be chosen to run
  # the given pods
  # nodeSelector:
  #   "node-role.kubernetes.io/your_role": "true"

  # Support for node tolerations that work together with node taints to control
  # the pods that can like on a node
  # tolerations:
  # - effect: NoSchedule
  #   key: node-role.kubernetes.io/your_role
  #   operator: Equal
  #   value: "true"

  # Specify the ServiceAccount where the Vault Pod and the Bank-Vaults configurer/unsealer is running
  serviceAccount: vault

  # Specify the Service's type where the Vault Service is exposed
  # Please note that some Ingress controllers like https://github.com/kubernetes/ingress-gce
  # forces you to expose your Service on a NodePort
  serviceType: ClusterIP

  # Request an Ingress controller with the default configuration
  ingress:
    # Specify Ingress object annotations here, if TLS is enabled (which is by default)
    # the operator will add NGINX, Traefik and HAProxy Ingress compatible annotations
    # to support TLS backends
    annotations:
    # Override the default Ingress specification here
    # This follows the same format as the standard Kubernetes Ingress
    # See: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.13/#ingressspec-v1beta1-extensions
    spec: {}

  # Use local disk to store Vault file data, see config section.
  volumes:
  - name: vault-file
    persistentVolumeClaim:
      claimName: vault-file

  volumeMounts:
  - name: vault-file
    mountPath: /vault/file

  # Support for distributing the generated CA certificate Secret to other namespaces.
  # Define a list of namespaces or use ["*"] for all namespaces.
  caNamespaces: [ kt-test ]

  # Describe where you would like to store the Vault unseal keys and root token.
  unsealConfig:
    options:
      # The preFlightChecks flag enables unseal and root token storage tests
      # This is true by default
      preFlightChecks: true
    kubernetes:
      secretNamespace: kt-test

  # A YAML representation of a final vault config file.
  # See https://www.vaultproject.io/docs/configuration/ for more information.
  config:
    storage:
      file:
        path: "${ .Env.VAULT_STORAGE_FILE }" # An example how Vault config environment interpolation can be used
    listener:
      tcp:
        address: "0.0.0.0:8200"
        # Uncommenting the following line and deleting tls_cert_file and tls_key_file disables TLS
        # tls_disable: true
        tls_cert_file: /vault/tls/server.crt
        tls_key_file: /vault/tls/server.key
    telemetry:
      statsd_address: localhost:9125
    ui: true

  # See: https://github.com/banzaicloud/bank-vaults#example-external-vault-configuration for more details.
  # (only applied on creation)
  externalConfig:
    policies:
    - name: allow_secrets
      rules: path "secret/*" {
          capabilities = ["create", "read", "update", "delete", "list"]
        }
    - name: read_secrets_data_infra_iitech
      rules: path "secret/data/infra/iitech/*" {
          capabilities = ["create", "read", "update", "delete", "list"]
        }
    - name: secret_ns_default
      rules: path "secret/data/ns/default/*" {
          capabilities = ["create", "read", "update", "delete", "list"]
        }
    - name: allow_pkixyz
      rules: path "pkixyz/*" {
          capabilities = ["create", "read", "update", "delete", "list"]
        }

    auth:
    - type: kubernetes
      roles:
      - name: default
        bound_service_account_names: ["vault"]
        bound_service_account_namespaces: [ kt-test]
        policies: allow_secrets
        ttl: 1h
    secrets:
    - type: kv
      path: secret
      description: General secrets.
      options:
        version: 2
    # The PKI secrets engine generates X.509 certificates
    # See https://www.vaultproject.io/docs/secrets/pki/index.html for more information
    - type: pki
      path: pkixyz
      description: Vault PKI Backend
      config:
        default_lease_ttl: 168h
        max_lease_ttl: 720h
      configuration:
        config:
        - name: urls
          issuing_certificates: https://vault.vault.kt-test:8200/v1/pkixyz/ca
          crl_distribution_points: https://vault.vault.kt-test:8200/v1/pkixyz/crl
        roles:
        - name: default
          allowed_domains: pod,svc,default
          allow_subdomains: true
          generate_lease: true
        - name: foobarer
          allowed_domains: foobar
          allow_subdomains: true
          generate_lease: true
          server_flag: false
          ttl: 30m

    # Allows writing some secrets to Vault (useful for development purposes).
    # See https://www.vaultproject.io/docs/secrets/kv/index.html for more information.
    startupSecrets:
    # infra
    - type: kv
      path: secret/data/ns/default/example
      data:
        data:
          name: superman
          password: supersecret

  vaultEnvsConfig:
  - name: VAULT_LOG_LEVEL
    value: debug
  - name: VAULT_STORAGE_FILE
    value: "/vault/file"

---
##04.02: InstrApply [apply -f -] vault-cr.yaml
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: vault-file
  namespace: "kt-test"
  labels:
    example.com/gitops: "kt-test"
spec:
  # https://kubernetes.io/docs/concepts/storage/persistent-volumes/#class-1
  # storageClassName: ""
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi

# ---
# apiVersion: v1
# kind: PersistentVolume
# metadata:
#   name: vault-file
# spec:
#   capacity:
#     storage: 1Gi
#   accessModes:
#   - ReadWriteOnce
#   persistentVolumeReclaimPolicy: Recycle
#   hostPath:
#     path: /vault/file

---
##05: InstrWait [wait --namespace kt-test --for condition=Ready pod vault-0]
